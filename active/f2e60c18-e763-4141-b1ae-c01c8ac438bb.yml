summary: Answer to Chris
notes: |
  Hi Chris,

  Thanks for reaching out to me about the D111414 patch.

  I would like to note a few things about this change. This particular patch is
  trivial and has been fully rewritten to conform with the LLVM code style and
  internal APIs, having nothing in common with libiberty other than the
  logic required to conform with the D specification. That said, I think this
  patch can be amended and merged.

  I also understand that the other changes can be seen differently, however. A
  few notes about those:

  - D official demangler, located in the D runtime library, is written under
    Boost license and follows the logic specified in the D ABI specification [1].
    The mangling section on the ABI specification specifies not only name
    mangling grammar but also how back referencing works, type mangling and other
    additional information required to write a conformant demangler. I think
    adding either changes from D official demangler, GNU implementation or a
    clean room one is debatable in terms of work derivation -- and I mean
    debatable because those implementations just follows the specification and
    somehow will derivate from the original logic -- and I think deviate from
    that is quite hard, specially in an implementation like this.

  - As I mentioned in D110576, Iain is the major contributor to this code and
    according to
    https://www.gnu.org/prep/maintain/html_node/Legally-Significant.html#Legally-Significant
    a significant number of changes I mentioned are not eligible. Iain also wrote
    in the mentioned patch that agrees with the relicensing. The relicensing is
    possible whenever the original author sees fit. Furthermore, Iain contacted
    the FSF about this topic and got an answer saying that, as the author, he has
    an unlimited, irrevocable license to relicense the code.

  If this is not sufficient I can try contacting every contributor and ask for
  permission to relicense the code to LLVM.

  I'm currently working on an official refactor of the D demangler, so I can
  perfectly write a clean room implementation if any other possibility is not
  accepted. As you probably understand, the rationale behind it is because it is
  time consuming writing a whole new implementation and reusing one is highly
  desirable.

  Since I'm not a lawyer, keep in mind to not take any legal advice from me.

  [1]: https://dlang.org/spec/abi.html
tags:
- llvm
project: saoc2021
priority: P1
delegatedto: ""
subtasks: []
dependencies: []
created: 2021-11-04T02:51:16.00923519Z
resolved: 0001-01-01T00:00:00Z
due: 0001-01-01T00:00:00Z
