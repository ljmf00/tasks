summary: Add post for 6th week
notes: "---\ntitle: 'SAOC LLDB D integration: 6th Weekly Update'\ndate: '2021-10-28T00:38:00+01:00'\ntags: ['saoc', 'saoc2021', 'dlang', 'llvm', 'lldb', 'debug', 'debugging', 'dwarf']\ndescription: \"This post describes what I've done on the 6th week of the\nSymmetry Autumn of Code 2021, including follow up on LLVM patches,\nimplementation of the array and string slices formatters on the D language\nplugin and minor fixes and refactoring\"\n---\n\nHi D community!\n\nI'm here again, to describe what I've done during the sixth week of Symmetry\nAutumn of Code.\n\n## LLVM Patches follow up\n\nThe first two patches were merged into the LLVM tree!\n\n- https://reviews.llvm.org/D111947\n- https://reviews.llvm.org/D111948\n\nHopefully we can now proceed with merging the demangling patches as the next\nstep.\n\n## LLDB D Plugin\n\nThis week I primarily worked on getting the D plugin working. I added two\nfeatures to the plugin which includes handling D slices generically and the\nspecial case of string slices. They are now formatted as a D string literal,\ndepending on its encoding.\n\nThis is a reduced example of what the LLDB can show to the user, with the D\nplugin.\n\n```\n* thread #1, name = 'app', stop reason = signal SIGSEGV: invalid address (fault address: 0xdeadbeef)\n    frame #0: 0x0000555555555edc app`app.foobar(p=0x00000000deadbeef, a=([0] = 1, [1] = 2, [2] = 3), ...) at app.d:43:2\n   40           immutable(dchar)[] sh = \"double atum\"d.dup;\n   41           const(wchar)[] si = \"wide atum\"w.dup;\n   42\n-> 43           return *p;\n   44   }\n   45\n   46   class CFoo {\n(lldb) fr v\n(int *) p = 0x00000000deadbeef\n(int[]) a = ([0] = 1, [1] = 2, [2] = 3)\n(long double) c = 123.122999999999999998\n(Foo) f = {}\n(string) sa = \"atum\"\n(wstring) sb = \"wide atum\"w\n(dstring) sc = \"double atum\"d\n(char[]) sd = \"atum\"\n(dchar[]) se = \"double atum\"d\n(wchar[]) sf = \"wide atum\"w\n(const(char)[]) sg = \"atum\"\n(dstring) sh = \"double atum\"d\n(const(wchar)[]) si = \"wide atum\"w\n```\n\nIf you are excited to test it by yourself, checkout\n[this](https://github.com/ljmf00/llvm-project/commits/llvm-plugin-d) branch and\ncompile lldb. I suggest the following steps:\n\n```bash\n# To use clang to compiler LLVM\nexport CC=clang\nexport CXX=clang++\n\n# CMake flags (compile to different target if you are not using x86)\ncmake -S llvm -B build -G Ninja \\\n\t-DLLVM_ENABLE_PROJECTS=\"clang;lldb\" \\\n\t-DCMAKE_BUILD_TYPE=Debug \\\n\t-DLLDB_EXPORT_ALL_SYMBOLS=OFF \\\n\t-DLLVM_OPTIMIZED_TABLEGEN=ON \\\n\t-DLLVM_ENABLE_ASSERTIONS=ON \\\n\t-DLLDB_ENABLE_PYTHON=ON \\\n\t-DLLVM_TARGETS_TO_BUILD=\"X86\" \\\n\t-DLLVM_CCACHE_BUILD=ON \\\n\t-DLLVM_LINK_LLVM_DYLIB=ON \\\n\t-DCLANG_LINK_CLANG_DYLIB=ON\n\nninja -C build lldb lldb-server\nldc2 -g app.d\n./build/bin/lldb app\n```\n\nYou can also use\n[this](https://gist.github.com/ljmf00/a35da0e41c3a2074d74960e981f43ca6) file,\nwhich is what I use to test the D plugin and used to show the above example.\n\n### Issues\n\nDuring the plugin development and testing, I found out that LLDB was not\nproperly showing UTF8 strings when using `char8_t` types with different names\nso I made a patch to fix it: https://reviews.llvm.org/D112564 . An issue was\nalso created to cross reference the fix\nhttps://bugs.llvm.org/show_bug.cgi?id=52324 . This is particularly an issue for\nthe D formatter if the compiler exports types with different type names, which\nthey should.  Debuggers should be able to read encoding DWARF tags and rely on\nthat first, instead of hardcoding the formatters. LLDB does that but this\nsomehow got skipped on https://reviews.llvm.org/D66447 .\n\nWhile reading how plugin are built with their internal C++ interface, I found\nvery repetitive code and decide to patch it: https://reviews.llvm.org/D112658 .\n\nI also happened to reproduce\n[this](https://bugs.llvm.org/show_bug.cgi?id=45856) issue that Mathias reported\na while ago and decided to investigate on it since it indirectly affects the\nbehaviour on D side. I got some conclusions and I believe this is a regression\nintroduced in 2015. Please read the issue for more context.\n\nI found other issues on the LDC side and DMD side that I already added to my\ntask list, including:\n- DMD should use wchar and dchar type names instead of `wchar_t`: This triggers\n  the hardcoded formatters to format char pointers wrongly. Furthermore this is\n  wrongly typed since `wchar_t` is not exactly UTF16, according to the C\n  standard.\n- DMD also reports other types as C style naming instead of D style\n- LDC reports hardcoded const(char) type instead of a DWARF type modifier\n\n### Mailing list announcement\n\nAs discussed erlier in a LLDB bug, I decided to write to the `llvm-dev` and\n`lldb-dev` mailing list to discuss about upstreaming the D language plugin. You\ncan follow up the thread\n[here](https://lists.llvm.org/pipermail/lldb-dev/2021-October/017101.html).\n\n## What is next?\n\nNext week, I'm going to try to fix the above listed issues on either DMD and\nLDC trees. I need to be careful with these changes to make sure I don't break\nGDB behaviour, if they are relying on the hardcoded types. If that is the case\nI'll try to patch it too. I'm going to also finish my DWARF refactor on the\nbackend to handle DWARF abbreviations correctly. The objective of the second\nmilestone is finished but I'm going to try to study more features to improve\npretty printing.\n\nYou can also read this on my blog,\n[here](https://lsferreira.net/posts/d-saoc-2021-06/).\n\nRead about the [previous week](../d-saoc-2021-05/).\n"
tags:
- community
project: saoc2021
priority: P0
delegatedto: ""
subtasks: []
dependencies: []
created: 2021-10-27T19:43:36.998727758+01:00
resolved: 0001-01-01T00:00:00Z
due: 0001-01-01T00:00:00Z
