summary: Write final report
notes: |
  # SAOC LLDB D integration: 4th Milestone and final thoughts

  Hi SAOC Judge Team,

  I'm here to report what I've done during the 4th Milestone on the Symmetry
  Autumn of Code and describe my overall experience with SAOC.

  ## 4th Milestone Report

  ### Summary
  #### Weekly updates

  You can find my weekly updates either on the forum or on my blog:

  - Week 14:
  [https://forum.dlang.org/thread/ynyjkvhgetyubpaffzxu@forum.dlang.org#post-ynyjkvhgetyubpaffzxu:40forum.dlang.org](forum)
  | [https://lsferreira.net/posts/d-saoc-2021-14](blog)
  - Week 15:
  [https://forum.dlang.org/thread/snxohwybymmaqvqprapo@forum.dlang.org](forum)
  | [https://lsferreira.net/posts/d-saoc-2021-15](blog)
  - Week 16:
  [https://forum.dlang.org/thread/cfeuzatpyknarblnsoti@forum.dlang.org#post-cfeuzatpyknarblnsoti:40forum.dlang.org](forum)
  | [https://lsferreira.net/posts/d-saoc-2021-16](blog)
  - Week 17:
  [https://forum.dlang.org/thread/rdjlagyrftqqxlmsjjwq@forum.dlang.org](forum)
  | [https://lsferreira.net/posts/d-saoc-2021-17](blog)

  #### Patches / Bugs / Mailing list threads

  - https://reviews.llvm.org/D116136
  - https://reviews.llvm.org/D116138
  - https://reviews.llvm.org/D116279
  - https://github.com/ldc-developers/ldc/pull/3891
  - https://github.com/ldc-developers/ldc/pull/3892
  - https://reviews.llvm.org/D117046
  - https://reviews.llvm.org/D117144
  - https://reviews.llvm.org/D117145
  - https://llvm.discourse.group/t/lldb-buildbots-verbosity/5253
  - https://llvm.discourse.group/t/lldb-test-suite-is-failing-on-linux-x86-64/5696

  ### Description

  During this month I've been working on extending the D `TypeSystem` and
  `DWARFASTParser` to support type name and value dumping. This milestone was
  made particularly of a lot of research on how `TypeSystem` and `DAWRFASTParser`
  talk together and understand the interdependency of each part along with the
  implementation of dumping types.

  Another chunk of my journey throughout this milestone was about completing some
  missing parts on patches I made in the past and move them forward in order to
  be merged. I worked mainly on support for `DW_TAG_immutable_type` DWARF tag,
  continued the demangler patch _train_ and worked on some other misc patches for
  Clang DWARF Parser decoupling.

  As an extra, since I'm adding support for D demangling, I decided to add proper
  support for other demanglers other than Itanium to be exported/printed on LLD
  linker that includes not only D demangling but also Rust and Microsoft
  demanglers.

  The rest of the code that are not in the list of patches, are implemented
  [here](https://github.com/devtty63/llvm-project/commits/lldb-d/implement-typesystem-d).

  #### More in-depth

  I started the first week implementing some basic helpers on DType wrapper to
  match with LLDB interfaces, including `lldb::Format`, `lldb::Encoding`,
  `lldb::BasicType` and extra helpers to fetch builtin type names. I also
  implemented some basic type name dumping for `bool` type.

  In the meantime, I needed to add support for `char8_t` basic type (since D char
  is a UTF-8 type) and ended up discovering the missing piece to fix UTF-8
  encoding on LLDB. This was not a big issue, since most of `char8_t` will
  benefit from built-in custom formatters that overrides the default behaviour,
  but for new languages without summary formatters this was an issue.

  This first week was also about some investigation on how `TypeSystem` and
  `DWARFASTParser` communicates. Understanding how those two interfaces work
  together was important to properly implement dumping. I actually thought that
  dumping was all made by hand, but fortunately, there is already common routines
  such as `DumpDataExtractor`, `DumpSummary` and `DumpTypeDescription` to handle
  that and format the output according to the LLDB style.

  In the next week, I extended dumping to also include variable values and
  started adding support for the rest of the types which were finished in the 3rd
  week.

  I had a major problem in the second week with `real`, a platform-dependent
  type. According to the specification, I got a bit confused and I still think it
  is not correct/explicit enough, although, after having some conversation with
  Iain, I found out that D just ends up following `long double` behaviour.

  I didn't get this right away as I tried fetching the size of the mantissa on
  different platforms and got different values on e.g. RISC-V. After some
  investigation, I found out that LDC was actually implementing a workaround to
  this, by doing it manually. The proper way would be to use `clang::TargetInfo`
  which implements all the variations of `long double` for the supported
  architectures of LLVM. Currently, LDC supports most of them, but only has logic
  for 4 or so. I made a PR to specifically fix RISC-V, although I expect this to
  fail on future X or Y architectures.

  For now, I'm going to stick with a hardcoded version using the bit size and the
  target triple, but the ultimate goal would be to use `clang::TargetInfo`.

  You can read more about this on the 15th weekly update post.

  Also in that week, I decided to add support for other demanglers on LLD. On the
  next release of LLD, if the D demangler can demangle the symbols, the output,
  instead of looking like this:

  ```
  app.d:16: error: undefined reference to '_D3app7noexistFZi'
  ```

  It will look something like this:

  ```
  app.d:16: error: undefined reference to 'app.noexist()'
  ```

  In the third week, I finished extending the dumping system to the rest of the
  builtin types. The output example is the following:

  ```
  (lldb) ta v
  Global variables for app.d in app:
  (int) app.int42_gvar = -42
  (ulong) app.ulong42_gvar = 42
  (uint) app.uint_gvar = 0
  (uint) app.uint42_gvar = 42
  (double) app.double_42_gvar = -42
  (real) app.real42_gvar = 42
  (long) app.long42_gvar = -42
  (dchar) app.d = U+0x00000064
  (ulong) app.ulong_gvar = 0
  (char) app.c = 0x63
  (bool) app.true_gvar = true
  (ushort) app.ushort_gvar = 0
  (byte) app.byte42_gvar = d6
  (double) app.double_gvar = 0
  (long) app.long_gvar = 0
  (double) app.double42_gvar = 42
  (float) app.float42_gvar = 42
  (wchar) app.w = U+0077
  ```

  This output is obviously without the D custom formatters implemented on the 2nd
  milestone, which needs a bit more information currently unavailable on this new
  implementation to be triggered.

  During that week I also amended some changes about the demangler and support
  for `DW_TAG_immutable_type` tag on LLVM core including the IR and
  `llvm-dwarfdump`, crucial to add support for debug info with derived types on
  LDC.

  In the last week, I finished 4 more patches about the demangler and self merged
  them into the official tree.

  Before merging, since most of the buildbots only run on master, the maintainer
  is responsible for running the required tests. I often run the sanitiser and
  fuzzer before merging, although this time I found a regression on LLVM 13.0. To
  explain it briefly, `-fno-semantic-interposition` optimization caused problems
  with ELF interposition, when adding extra calls that are not PC-relative. You
  can read more about the problem on the last weekly report.

  I also started working on extending the dumping system to derived types,
  although, I didn't finish the implementation. For now, it works for most of the
  derived types as normal base types. One of the problems I found is decoupling
  issues with the Clang DWARF Parser.

  The last week was kinda unproductive due to a lot of side effect problems with
  test suite. You can read more about those in the last weekly report too.

  ### Conclusion

  According to the milestones I presented last month, I covered only a fraction
  of it, although, leaving the core problem (type and value dumping) solved. My
  idea on presenting those steps was more like a task list to have minimum
  features to implement expressions, although far from being doable in a month,
  as I mentioned on the 3rd milestone report. After all, I'm pretty happy with
  the outcome.

  ## My overall experience with SAoC

  ### Introduction

  First of all, I would like to thank The D Language Foundation and Symmetry
  Investments for sponsoring this event and incentivise my brain to learn a lot
  with this project.

  ### During the event

  #### Demangler port

  I started the event porting libiberty demangler from GCC tree to LLVM, by
  adapting it to be more C++ish and using the LLVM style along with some minor
  changes. It was a straightforward task at the beginning (I did a patch with the
  whole port) but ended up having a lot of _bureaucracy_ due to licensing and a
  lot of changes came in the way, including splitting the single patch into
  several small ones. I ended up implementing a slightly different version during
  the event as changes got requested from the LLVM maintainers. Even though this
  was/is a slow task, I acknowledged that it is better this way, as we can
  deviate a bit from the previous implementation and add some discussion on top
  to improve a next iteration of the whole _"algorithm"_.

  #### Synthetic formatters and language plugin

  After adding support for the demangler in LLVM, I started working on the second
  milestone, which was about adding support for pretty printing on types not
  recognized by the current C parser. I added support for pretty-printing arrays
  and the special case of strings and individual characters, depending on its
  encoding.

  After doing some investigation on how these formatters are implemented in-tree,
  it was fairly straightforward to add them, although I found out some things to
  improve on the compilers DWARF generator, that was not conformat with the DWARF
  standard or generating old C style types. I will describe that a bit more on
  the "Extra work" section.

  #### D `TypeSystem` and `DWARFASTParser`

  In the 3rd milestone, I started implementing a whole new `TypeSystem` and
  `DWARFASTParser`. In the beginning I thought this was as straightforward as it
  was with the previous milestones, although due to lack of knowledge on how LLDB
  was structured and some overestimation, this ended up being the largest task
  throughout the event. I talked to some LLDB maintainers and presented the idea
  on the mailing list but they told me that expression parsing is a whole new
  topic to cover, and rather focus on the essential dependencies, the
  `TypeSystem` and the `DWARFASTParser` for D.

  I started looking into the current implementation of those interfaces for Clang
  and looked into a previously implemented one made for Go, that ended up being
  deprecated due to lack of maintenance. I started understanding a bit about how
  they interact with each other and ultimately, interact with the other LLDB
  interfaces.

  Looking into the Go implementation more precisely, I found out that a lot of
  code is copy-pasted from the Clang implementation and a good chunk of it is
  very outdated, using methods no longer present in the current LLDB
  implementation. For those repeated pieces, I tried to make some patches to the
  upstream to decouple them, to be used in the future for, not only D, but any
  new language that could be added to LLDB.

  In parallel to that, I implemented a basic `TypeSystem` and `DWARFASTParser`
  and slowly added features on top. Mainly, what I implemented there was support
  for built-in types. With the current implementation, we can read all the
  built-in base types (only global/thread-local, although it should be pretty
  straightforward to add it on function variables too).

  #### Extra work

  ##### Improve DWARF generator of DMD/LDC

  I did significant improvements to the DWARF generator on DMD that I wasn't
  planning to. I believe this was a really important thing to do, to either LLDB
  but also GDB report information more accurately. Most of the work was not a
  requirement, since I could rely on LDC implementation, but realistically
  speaking, having a fairly decent debug info generator in the reference compiler
  is desired. You can read more about those improvements in the milestone 2
  report. There is still a lot of problems I, unfortunately, didn't cover, such
  as wrong address ranges on DWARF 5, which I don't fully understand, although
  debuggers can safely ignore those errors and proceed to what they understand.

  I also did some nit changes on LDC tree, but most of them are stalled due to
  some requirements on the upstream LLVM, such as support for immutable type
  qualifiers on the LLVM IR debug info. You can see the issues I created on LDC
  and the associated patches on LLVM. I also tried to add support for DWARF
  column DECL but was a bit too complex to do it, so I decided to move on, on
  that particular change.

  ##### Other relevant work

  As described in the 4th milestone report (above this) I added support for D
  demangling on LLD linker. I also did some improvement changes on GCC tree about
  the demangler I ported and did some changes along the way on LLVM/LLDB tree
  about some unicode issues throughout the event.

  ### Challenges and difficulties

  Despite the GCC and LLVM licensing issues, I had some challenges and
  difficulties along the way to solve. The biggest challenge was certainly
  discovering how LLVM works with only documentation and the codebase. Luckily,
  LLVM is a fairly big project with really good documentation, even about
  internal workflow, although LLDB itself lacks some, especially about the
  internal workflow.

  I also had some issues on interpreting D ABI/specification, primarily the
  calling convention and implementation defined types with platform-dependent bit
  size, like `real`. I tried to fix D calling convention although without
  success.

  At the beginning I also had some difficulties understanding DWARF, but turns
  out to be a very simple standard. The most complex part that I didn't dig into,
  is address ranges, exception handling and other stuff that DWARF includes/cover
  that wasn't either worth for this work or already abstracted by the LLDB or
  compiler.

  ### Notes for the next steps

  There is some work that wasn't done before submitting this to the upstream.
  Mainly, the `TypeSystem` and `DWARFASTParser` lacks parsing/understanding
  function, non-built-in types and needs some solidification of derived type
  support. I would consider this the bare minimum to add those interfaces to the
  official tree.

  Another thing to consider, is trying to upstream the synthetic formatters. They
  require a workaround patch in order to work and may fail some tests on the LLDB
  test suite. This is something I can try to focus in my free time, but a very
  important step to make official LLDB comparable to GDB.

  I did some other notes on the last weekly report, but those two are crucial.

  ### Conclusion

  I hope to continue this project in my free time, although I'm proud of my
  overall outcome and the enormous knowledge I managed to acquire in a lot of
  fields I wanted to learn and specialize in, including a deep understanding of
  the DWARF standard, a wider perspective of the LLVM infrastructure (not only
  LLDB, but also the LLVM core and the related tool-chains around it such as
  `llvm-dwarfdump` and `lld`) and how debuggers work and interact with the
  attached process and the kernel itself. In parallel, this project also
  triggered me some interest in other fields such as LLVM
  optimization/transformation passes that I also tried to learn and understand,
  even though not related with the project itself, and the importance of fuzzing
  a codebase.
tags:
- community
project: saoc2021
priority: P0
delegatedto: ""
subtasks: []
dependencies: []
created: 2022-01-17T04:15:24.67218885Z
resolved: 2022-01-28T18:57:51.757577417Z
due: 0001-01-01T00:00:00Z
