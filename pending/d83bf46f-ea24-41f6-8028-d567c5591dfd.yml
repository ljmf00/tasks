summary: 'From ground 0x00 to Hero: Memory'
notes: |+
  # From ground 0x00 to Hero: Memory

  This blog post explains briefly how memory works by explaining:
  - How Random-access Memory (RAM) generically works
  - How the computer hardware and the operating system manage the system memory
  - How a _program_ organizes memory and how memory sections are mapped in the
    process memory space
  - How to allocate/reserve memory in different memory sections in C

  ## Random-access Memory

  DRAM sticks is one of the most common key components of a basic working
  computer. [DRAM (Dynamic Random-access
  Memory)](https://bafybeiaysi4s6lnjev27ln5icwm6tueaw2vdykrtjkwiphwekaywqhcjze.ipfs.dweb.link/wiki/Dynamic_random-access_memory)
  is a type of random-access memory where the computer primarily keeps
  information temporarily, such as information about the running programs. In
  contrast to direct-access storage, random-access memory can fetch and store
  content randomly in an almost constant time.

  In order to be useful and easy to read and write into memory, RAM is
  addressable, which means that every bit stored in a memory cell has _"a
  location number"_ or an address. Commonly, memory is addressed in 8-bits (1
  byte), which means that each RAM stick typically contains 8 memory cells to
  represent a byte in memory.

  **insert memory address scheme**

  In the figure above, we can see the content addressed in bytes. For example,
  the address `100` points to `a` in memory, the address `101` points to `b` and
  so on and so forth.

  ### A bit of binary

  As you can probably tell, `a` glyph can't just be "drawn" in memory and
  instead, we stored a numeric representation of that character, using either
  ASCII, UTF-8 or other representation. The ASCII table is the most basic one and
  extensively used for basic letters. UTF-8 and UTF-16 is more widely used to
  represent other glyphs not used in, e.g. English alphabet.

  For us to understand how this works, we need to understand a bit about how
  binary representation works.

  Let's say that `'a'` in ASCII is 97 in decimal. To represent it in binary, we
  do the following:

  **insert 97 in binary table**

  If you look at the table above, you can see that there is some bit's with `1`
  and some with `0`. This means that if you sum the power of `2` of each index
  with a `1` you can have the number in decimal. To convert to binary, you do
  pretty much the reverse, you try to find from higher to lower, if the number
  _fits_.

  In this example:

  **insert calculations of 97 from power of 2**

  ## Interaction with the Operating System

tags:
- blog
project: personal
priority: P2
delegatedto: ""
subtasks: []
dependencies: []
created: 2022-03-10T00:02:19.420853412Z
resolved: 0001-01-01T00:00:00Z
due: 0001-01-01T00:00:00Z
